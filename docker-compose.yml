# Version du schéma docker-compose utilisé
version: "3.9"

# Liste des conteneurs à lancer
services:
  frontend:
    build: 
      context: ./frontend                                    # chemin vers le Dockerfile du frontend
      dockerfile: Dockerfile
    container_name: frontend_service
    ports:
        - "8501:8501"                                      # Streamlit exposé
    depends_on:
        - api                                              # attend que le service api soit démarré avant de démarrer le frontend
    networks:
        - face_net                                         # réseau virtuel interne pour que les conteneurs communiquent entre eux (par leur nom de service)

  api:
    build: 
      context: ./api                                         # chemin vers le Dockerfile de l'API
      dockerfile: Dockerfile
    container_name: api_flask
    ports:
        - "8000:8000"  
    depends_on:
        - recognition                                      # attend que le service recognition soit démarré avant de démarrer l'API  
        - db                                               # attend que le service db soit démarré avant de démarrer l'API
    environment:
        - DB_HOST=db                                       # nom du service de la base de données
        - DB_PORT=5432                                     # port par défaut de PostgreSQL
        - DB_USER=face_user                                # utilisateur de la base de données
        - DB_PASSWORD=face_pass                            # mot de passe de la base de données
        - DB_NAME=faces                                    # nom de la base de données
    networks:
        - face_net

  recognition:                                           
    build: 
      context: ./recognition                             # dossier contenant le Dockerfile + requirements.txt +service.py  
      dockerfile: Dockerfile
    container_name: recognition_service
    depends_on:
      - db
    ports:
      - "5000:5000"                                           # utile pour tester en local le service de reconnaissance
    environment:
      - DB_HOST=db                                       # nom du service de la base de données
    volumes:
      - ./recognition/data:/app/data                     # monte le dossier data de l'hôte vers /app/data dans le conteneur (pour persister les images)
    networks:
      - face_net

  db:
    image: postgres:15                                   # image officielle de PostgreSQL
    container_name: db_service
    restart: always                                      # redémarre le conteneur automatiquement en cas de plantage
    environment:
      POSTGRES_USER: username                            # utilisateur de la base de données
      POSTGRES_PASSWORD: password                        # mot de passe de la base de données
      POSTGRES_DB: faces                                 # nom de la base de données
    ports:
      - "5432:5432"                                           # utile pour accéder en local à la base de données
    volumes:
      - pgdata:/var/lib/postgresql/data                  # ce qui est stocké dans /var/lib/postgresql/data (dossier interne où Postgres met ses fichiers) est redirigé vers un espace persistant (pgdata)
    networks:
      - face_net

networks:
  face_net:                                              # réseau virtuel interne pour que les conteneurs communiquent entre eux (par leur nom de service)
    driver: bridge

volumes:
  pgdata:                                               # volume Docker pour persister les données de la base de données
